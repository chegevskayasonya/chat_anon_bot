import os
import logging
import time
from dotenv import load_dotenv
from datetime import datetime, timedelta
from collections import defaultdict
from urllib.parse import quote_plus
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ContentType
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import MessageNotModified


# üîê –ë–µ–∑–ø–µ–∫–∞ —Ç–æ–∫–µ–Ω–∞ (–∑–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞)
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –¥–æ–¥–∞–π —É —Å–∏—Å—Ç–µ–º—ñ –∞–±–æ .env:
# BOT_TOKEN=–¢–í–û–ô_–¢–û–ö–ï–ù_–°–Æ–î–ò
load_dotenv()
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not API_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∏–π —É .env!")


# üëë –ê–¥–º—ñ–Ω–∏ —ñ VIP
ADMIN_IDS = {1610338865}
ALWAYS_VIP_USERS = set(ADMIN_IDS)

# ‚öôÔ∏è –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# ===================== –ó–ë–ï–†–Ü–ì–ê–ù–ù–Ø –î–ê–ù–ò–• =====================


user_interests = defaultdict(set)       
waiting = []                            
pairs = {}                              
dislikes = defaultdict(lambda: defaultdict(list))   
reports = defaultdict(lambda: defaultdict(list))    
user_gender = {}                         
user_age = {}                            
user_media_pref = {}                     
user_stars = defaultdict(int)           
user_vip_until = {}                      
always_vip_users = set()                 
user_coins = defaultdict(int)            
vip_settings = {}                       
referrals = defaultdict(set)            
active_chats = {}                        
search_queue = []                       
search_sessions = {}                     
vip_users={}
users_data = {}
active_chats = {}
reported_users = {}
REPORT_REASONS = ["–†–µ–∫–ª–∞–º–∞","–ü—Ä–æ–¥–∞–∂","–†–æ–∑–ø–∞–ª—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤","–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ—ñ—è","–ù–∞—Å–∏–ª–ª—è","–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É—ó—Ü–∏–¥—É","–Ü–Ω—à–µ"]



users = defaultdict(lambda: {
    "gender": None,
    "age": None,
    "coins": 0,
    "vip_until": None,
    "invited_by": None,
    "stars": 0,
    "media_pref": None,
    "interests": set()
})

users_data = {}


# ===================== –°–¢–ê–ù–ò =====================
class Form(StatesGroup):
    age = State()
    gender = State()
class SettingsState(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()




def feedback_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("üëçüèª", callback_data="feedback_like"),
        InlineKeyboardButton("üëéüèª", callback_data="feedback_dislike"),
        InlineKeyboardButton("üö´", callback_data="feedback_report"),
    )
    return kb

def gender_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞", callback_data="gender_female"),
        InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞", callback_data="gender_male")
    )
    return kb

def age_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("–í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–∫ ‚ùå", callback_data="age_delete"),
        InlineKeyboardButton("–ù–∞–∑–∞–¥ üîô", callback_data="age_back")
    )
    return kb

async def build_interest_kb(uid):
    kb = InlineKeyboardMarkup(row_width=2)
    for key, val in INTERESTS.items():
        selected = " ‚úÖ" if key in user_interests.get(uid, set()) else ""
        kb.insert(InlineKeyboardButton(val + selected, callback_data=f"int_{key}"))
    kb.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="done"))
    return kb

def report_reasons_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    for reason in REPORT_REASONS:
        kb.add(InlineKeyboardButton(reason, callback_data=f"report_{reason}"))
    return kb

def chat_control_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(InlineKeyboardButton("üîö –ó–∞–≤–µ—Ä—à–∏—Ç–∏", callback_data="end_chat"))
    kb.add(InlineKeyboardButton("üîó –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º", callback_data="share_link"))
    kb.add(InlineKeyboardButton("‚≠ê –û—Ü—ñ–Ω–∏—Ç–∏", callback_data="feedback_prompt"))
    return kb



def vip_menu():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üíé VIP 7 –¥–Ω—ñ–≤ –∑–∞ 30 ‚≠êÔ∏è", callback_data="buy_vip_7days"))
    kb.add(InlineKeyboardButton("üíé VIP 1 –º—ñ—Å—è—Ü—å –∑–∞ 100 ‚≠êÔ∏è", callback_data="buy_vip_1month"))
    kb.add(InlineKeyboardButton("üíé VIP 3–º—ñ—Å—è—Ü—è –∑–∞ 200 ‚≠êÔ∏è", callback_data="buy_vip_12months"))
    return kb



# ===================== –°–¢–ê–†–¢ =====================


def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"))
    kb.add(KeyboardButton("üéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏"))
    kb.add(KeyboardButton("üîß –ü–æ—à—É–∫ –∑–∞ —Å—Ç–∞—Ç—Ç—é"))
    return kb
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    text = (
        "–¶–µ –∞–Ω–æ–Ω—ñ–º–Ω–∏–π —á–∞—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –¥–µ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –¥—Ä—É–∑—ñ–≤, "
        "–æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É —Ç–∞ –∫–ª–∞—Å–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è üí¨\n\n"
        "–ú–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ —É—Å—ñ–º–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ /help"
    )
    
    await message.answer(text, reply_markup=main_menu())
def is_vip(uid):
    if uid in always_vip_users:
        return True
    vip_end = user_vip_until.get(uid)
    return bool(vip_end and vip_end > datetime.now())

# ==================== –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ ====================
@dp.message_handler(lambda m: m.text == "üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥")
async def start_search(message: types.Message):
    user_id = message.from_user.id

    if user_id in active_chats:
        await message.answer("‚ùó –í–∏ –≤–∂–µ —É –¥—ñ–∞–ª–æ–∑—ñ.\n"
                             "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /stop –¥–ª—è –π–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
        return

    if user_id not in search_queue:
        search_queue.append(user_id)
        await message.answer(" –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞...üîé")

    await try_match_users()

async def try_match_users():
    global search_queue
    sorted_queue = sorted(search_queue, key=lambda uid: not is_vip(uid))

    while len(sorted_queue) >= 2:
        user1 = sorted_queue.pop(0)
        user2 = sorted_queue.pop(0)

        search_queue = [u for u in search_queue if u not in [user1, user2]]
        active_chats[user1] = user2
        active_chats[user2] = user1

        await send_match_message(user1, user2)
        await send_match_message(user2, user1)

# ==================== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ====================
async def send_match_message(uid, partner_uid, common_interests):
    # ‚úÖ —Ü—ñ –¥–≤–∞ —Ä—è–¥–∫–∏ ‚Äî –Ω–∞ —Å–∞–º–æ–º—É –ø–æ—á–∞—Ç–∫—É
    partner_data = users_data.get(partner_uid, {})
    partner_vip = is_vip(partner_uid)

    if common_interests:
        common_text = ", ".join(str(x) for x in common_interests)
    else:
        common_text = "–Ω–µ–º–∞—î"

    # –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ Next / Stop
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("Next", callback_data="next_user"),
        InlineKeyboardButton("Stop", callback_data="stop_chat")
    )

    base_footer = (
        "\n\n/next - –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫\n"
        "/stop - –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥\n"
        "/interests - –Ü–Ω—Ç–µ—Ä–µ—Å–∏ –ø–æ—à—É–∫—É\n\n"
        "https://t.me/your_channel_link"
    )

    if partner_vip:
        gender = partner_data.get("gender", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
        age = partner_data.get("age", "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ")
        text = (
            "üíé –í–∏ –∑–Ω–∞–π—à–ª–∏ VIP-—Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!\n"
            f"–°—Ç–∞—Ç—å: {gender}\n"
            f"–í—ñ–∫: {age}\n"
            f"–°–ø—ñ–ª—å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏: {common_text}"
            + base_footer
        )

        # –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ), –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ ‚Äî –ø—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        try:
            await bot.send_photo(
                uid,
                photo="https://pin.it/5MBe1l8Ug",  # –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–∞—Ä—Ç–∏–Ω–∫—É
                caption=text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception:
            # fallback: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(uid, text, reply_markup=keyboard)
    else:
        text = (
            "–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–Ω–∞–π–¥–µ–Ω–æ!\n"
            f"–°–ø—ñ–ª—å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏: {common_text}"
            + base_footer
        )
        await bot.send_message(uid, text, reply_markup=keyboard)

# ==================== –û–±—Ä–æ–±–∫–∞ Next / Stop ====================
async def finish_chat(uid):
    partner = active_chats.pop(uid, None)  # –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç—É
    if partner and partner in active_chats:
        active_chats.pop(partner)  # –≤–∏–¥–∞–ª—è—î–º–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        await bot.send_message(partner, "–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /search, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞! ")  # –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞

# üîπ –ö–æ–º–∞–Ω–¥–∞ /next
@dp.message_handler(commands=["next"])
async def cmd_next_command(message: types.Message):
    uid = message.from_user.id

    if uid not in active_chats:
        await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /search, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!")
        return

    await finish_chat(uid)
    await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ\n–®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞‚Ä¶üîé")

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —á–µ—Ä–≥—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É
    if uid not in search_queue:
        search_queue.append(uid)

    await try_match_users()  # –∑–∞–ø—É—Å–∫–∞—î–º–æ –ø—ñ–¥–±—ñ—Ä –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞

# üîπ –ö–æ–º–∞–Ω–¥–∞ /stop
@dp.message_handler(commands=["stop"])
async def cmd_stop_command(message: types.Message):
    uid = message.from_user.id

    if uid not in active_chats:
        await message.answer("–í–∏ –Ω–µ –≤ –¥—ñ–∞–ª–æ–∑—ñ.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /search, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!")
        return

    await finish_chat(uid)
    await message.answer("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ .\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /search, —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞")
    

    if uid in search_queue:
        
        search_queue.remove(uid)





async def show_rating(call_or_message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üëç", callback_data="rate_like"),
        InlineKeyboardButton("üëé", callback_data="rate_dislike"),
        InlineKeyboardButton("–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å", callback_data="rate_report")
    )

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await call.message.edit_text("‚úÖ –î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n–û—Ü—ñ–Ω—ñ—Ç—å —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞:", reply_markup=kb)

# ==================== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ VIP ====================
def is_vip(uid):
    if uid in always_vip_users:
        return True
    vip_end = user_vip_until.get(uid)
    return bool(vip_end and vip_end > datetime.now())

# ==================== –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ ====================
@dp.message_handler(lambda m: m.text == "üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥" or m.text.lower() == "/search")
async def search_user(message: types.Message):
    uid = message.from_user.id
    

    search_queue.append(uid)
    await message.answer("–®—É–∫–∞—î–º–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞‚Ä¶üîé")
    await try_match_users()

async def try_match_users():
    if len(search_queue) < 2:
        return

    # üíé –°–æ—Ä—Ç—É—î–º–æ —á–µ—Ä–≥—É —Ç–∞–∫, —â–æ–± VIP –±—É–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É
    sorted_queue = sorted(search_queue, key=lambda u: not is_vip(u))

    for i in range(len(sorted_queue)):
        for j in range(i + 1, len(sorted_queue)):
            u1 = sorted_queue[i]
            u2 = sorted_queue[j]

            inters1 = user_interests.get(u1, set())
            inters2 = user_interests.get(u2, set())

            common = inters1 & inters2
            if not common:
                continue

            # –í–∏–¥–∞–ª—è—î–º–æ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —ñ–∑ —á–µ—Ä–≥–∏
            if u1 in search_queue:
                search_queue.remove(u1)
            if u2 in search_queue:
                search_queue.remove(u2)

            # –ó–∞–ø–∏—Å—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—É –ø–∞—Ä—É
            active_chats[u1] = u2
            active_chats[u2] = u1

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–±–æ–º
            await send_match_message(u1, u2, common)
            await send_match_message(u2, u1, common)
            return  # –ø—Ä–∏–ø–∏–Ω—è—î–º–æ, —â–æ–± –Ω–µ —à—É–∫–∞—Ç–∏ –¥–∞–ª—ñ

# ==================== –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –ó–ù–ê–ô–î–ï–ù–û–ì–û –°–ü–Ü–í–†–û–ó–ú–û–í–ù–ò–ö–ê ====================

async def send_match_message(uid, partner_uid, common_interests):
    partner_data = users_data.get(partner_uid, {})
    partner_vip = is_vip(partner_uid)

    # –§–æ—Ä–º—É—î–º–æ –±–∞–∑–æ–≤–∏–π —Ç–µ–∫—Å—Ç
    if partner_vip:
        text = (
            "üíé –í–∏ –∑–Ω–∞–π—à–ª–∏ VIP-—Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞!\n"
            f"–°—Ç–∞—Ç—å: {partner_data.get('gender', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
            f"–í—ñ–∫: {partner_data.get('age', '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
        )
    else:
        text = "–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–Ω–∞–π–¥–µ–Ω–æ!\n"

    text += "–°–ø—ñ–ª—å–Ω—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏: " + (", ".join(common_interests) if common_interests else "–Ω–µ–º–∞—î") + "\n"

    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
    text += (
        "\n/next - –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫\n"
        "/stop - –ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥\n"
        "/interests - –Ü–Ω—Ç–µ—Ä–µ—Å–∏ –ø–æ—à—É–∫—É\n"
        "https://t.me/your_channel_link"
    )

    # –ö–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("Next", callback_data="next_user"),
        InlineKeyboardButton("Stop", callback_data="stop_chat")
    )

    # üíé –Ø–∫—â–æ –ø–∞—Ä—Ç–Ω–µ—Ä VIP ‚Äî –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑ —Ñ–æ—Ç–æ
    if partner_vip:
        photo_url = ""  # ‚ö†Ô∏è Pinterest (pin.it) –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î –ø—Ä—è–º–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        try:
            await bot.send_photo(
                chat_id=uid,
                photo=photo_url,
                caption=text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"[WARN] –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ VIP: {e}")
            await bot.send_message(uid, text, reply_markup=keyboard)
    else:
        # üë§ –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ ‚Äî —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç
        await bot.send_message(uid, text, reply_markup=keyboard)

# ==================== –û–±—Ä–æ–±–∫–∞ Next / Stop ====================
@dp.callback_query_handler(lambda c: c.data in ["next_user", "stop_chat"])
async def navigate_user(call: types.CallbackQuery):
    uid = call.from_user.id
    partner = active_chats.pop(uid, None)
    if partner:
        active_chats.pop(partner, None)

    if call.data == "stop_chat":
        # –ü—ñ—Å–ª—è —Å—Ç–æ–ø –º–æ–∂–Ω–∞ –æ—Ü—ñ–Ω–∏—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("üëç", callback_data="rate_like"),
            InlineKeyboardButton("üëé", callback_data="rate_dislike"),
            InlineKeyboardButton("–ü–æ—Å–∫–∞—Ä–∂–∏—Ç–∏—Å—å", callback_data="rate_report")
        )
        await call.message.edit_text("–î—ñ–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚úÖ\n–û—Ü—ñ–Ω—ñ—Ç—å —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞:", reply_markup=kb)
    else:
        # Next ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ω–æ–≤–∏–π –ø–æ—à—É–∫
        search_queue.append(uid)
        await call.message.edit_text("–®—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞‚Ä¶üîé")
        await try_match_users()
# ===================== –û–ë–†–û–ë–ö–ê –ö–ù–û–ü–û–ö =====================
# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥"
@dp.message_handler(lambda message: message.text == "üí¨ –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥")
async def start_dialog_handler(message: types.Message):
    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ñ—É–Ω–∫—Ü—ñ—è search –≤–∏–∑–Ω–∞—á–µ–Ω–∞
    await search(message)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /search

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "üéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏"
@dp.message_handler(lambda message: message.text == "üéØ –Ü–Ω—Ç–µ—Ä–µ—Å–∏")
async def interests_handler(message: types.Message):
    await cmd_interests(message)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /interests

# –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ "üîß –ü–æ—à—É–∫ –∑–∞ —Å—Ç–∞—Ç—Ç—é"
@dp.message_handler(lambda message: message.text == "üîß –ü–æ—à—É–∫ –∑–∞ —Å—Ç–∞—Ç—Ç—é")
async def vip_button_handler(message: types.Message):
    await cmd_vip(message)


# ===================== HELP =====================
@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    text = (
        "üìú –°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è\n"
        "/interests - –í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä–µ—Å–∏\n"
        "/search - –ü–æ—à—É–∫ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞\n"
        "/stop - –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥\n"
        "/next - –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫\n"
        "/vip - –°—Ç–∞—Ç–∏ VIP –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º\n"
        "/settings - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—É–∫—É\n"
        "/rules - –ü—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏,–Ω–æ–≤–∏–Ω–∏ —á–∞—Ç—É\n"
        "/myid - –í–∞—à ID\n"
        "/coins - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–Ω–µ—Ç–∫–∏ü™ô\n"
        "/support - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
        "/viptime - –ß–∞—Å —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ VIP\n"
    )
    await message.answer(text)

# ===================== RULES =====================
@dp.message_handler(commands=["rules"])
async def cmd_rules(message: types.Message):
    await message.answer("üìé –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç—É: https://t.me/your_channel_link")



def give_stars_to_admin(amount: int):
    """–ó—ñ—Ä–∫–∏ –∞–¥–º—ñ–Ω—É (–∑–∞–≥–ª—É—à–∫–∞)"""
    pass

# ---------------- –§—É–Ω–∫—Ü—ñ—ó ----------------

def is_vip(user_id: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î VIP-—Å—Ç–∞—Ç—É—Å"""
    if user_id in always_vip_users:
        return True
    until = user_vip_until.get(user_id)
    return bool(until and until > datetime.now())

# ---------------- –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ----------------

def vip_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("7 –¥–Ω—ñ–≤ ‚Äî 30 ‚≠êÔ∏è", callback_data="buy_vip_7days"),
        InlineKeyboardButton("1 –º—ñ—Å—è—Ü—å ‚Äî 100 ‚≠êÔ∏è", callback_data="buy_vip_1month"),
        InlineKeyboardButton("3 –º—ñ—Å—è—Ü—ñ ‚Äî 200 ‚≠êÔ∏è", callback_data="buy_vip_3months"),
    )
    return kb

def report_reasons_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    for reason in REPORT_REASONS:
        kb.add(InlineKeyboardButton(reason, callback_data=f"report_{reason}"))
    return kb

# ---------------- –ö–æ–º–∞–Ω–¥–∏ ----------------

@dp.message_handler(commands=["vip"])
async def cmd_vip(message: types.Message):
    photo_url = "https://pin.it/5MBe1l8Ug"
    txt = (
        "üíé <b>–°—Ç–∞–Ω—å—Ç–µ VIP-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —ñ –æ—Ç—Ä–∏–º–∞–π—Ç–µ –º–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ–≤–∞–≥!</b>\n\n"
        "üìå <b>–ü–æ—à—É–∫ –∑–∞ —Å—Ç–∞—Ç—Ç—é</b>\n"
        "üë© –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —à—É–∫–∞—Ç–∏ –ª–∏—à–µ –¥—ñ–≤—á–∞—Ç –∞–±–æ –ª–∏—à–µ —Ö–ª–æ–ø—Ü—ñ–≤.\n\n"
        "üìå <b>–ë–µ–∑–ª—ñ–º—ñ—Ç–Ω–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è</b>\n"
        "‚ôæÔ∏è –ë–µ–∑ –æ–±–º–µ–∂–µ–Ω—å –Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —á–∞—Ç—ñ–≤ –Ω–∞ –¥–µ–Ω—å.\n\n"
        "üìå <b>–í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∫–ª–∞–º–∏</b>\n"
        "üö´ –ú–∏ –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∫–ª–∞–º—É VIP-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n\n"
        "üìå <b>–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —á–∞—Ç—É</b>\n"
        "üéÅ –í–∞—à–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–æ–ø–æ–º–∞–≥–∞—î –Ω–∞–º —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –±–æ—Ç —ñ –∑–∞–ª—É—á–∞—Ç–∏ –±—ñ–ª—å—à–µ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—ñ–≤!\n\n"
        "üí∞ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å VIP:</b>\n"
        "7 –¥–Ω—ñ–≤ ‚Äî 30 ‚≠êÔ∏è\n"
        "1 –º—ñ—Å—è—Ü—å ‚Äî 100 ‚≠êÔ∏è\n"
        "3 –º—ñ—Å—è—Ü—ñ ‚Äî 200 ‚≠êÔ∏è\n\n"
        "üëá –û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å VIP –Ω–∏–∂—á–µ:"
    )
    await message.answer_photo(photo=photo_url, caption=txt, parse_mode="HTML", reply_markup=vip_menu())

# ---------------- Callback –¥–ª—è –ø–æ–∫—É–ø–∫–∏ VIP ----------------

async def process_vip_purchase(callback: types.CallbackQuery):
    uid = callback.from_user.id
    data = callback.data

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
    if uid not in user_stars:
        user_stars[uid] = 0

    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –ø–æ–∫—É–ø–∫–∏
    if data.endswith("7days"):
        price, days, period_text = 30, 7, "7 –¥–Ω—ñ–≤"
    elif data.endswith("1month"):
        price, days, period_text = 100, 30, "1 –º—ñ—Å—è—Ü—å"
    elif data.endswith("3months"):
        price, days, period_text = 200, 90, "3 –º—ñ—Å—è—Ü—ñ"
    else:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ VIP
    if is_vip(uid):
        await callback.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π VIP!", show_alert=True)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
    if user_stars[uid] < price:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑—ñ—Ä–æ–∫!", show_alert=True)
        return

    # –°–ø–∏—Å—É—î–º–æ –∑—ñ—Ä–∫–∏ —Ç–∞ –¥–∞—î–º–æ VIP
    user_stars[uid] -= price
    give_stars_to_admin(price)
    user_vip_until[uid] = datetime.now() + timedelta(days=days)
    vip_settings[uid] = {"allow_media": True}

    await callback.message.answer(
        f"‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞—à VIP –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ {period_text} üéâ",
        parse_mode="HTML"
    )

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"üíé –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –∫—É–ø–∏–≤ VIP –Ω–∞ {period_text} –∑–∞ {price} ‚≠êÔ∏è"
    )
    await callback.answer("VIP —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!", show_alert=True)

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith("buy_vip_"))
async def buy_vip_handler(callback: types.CallbackQuery):
    await process_vip_purchase(callback)

def check_punishment(user_id, action_type="dislike", reason=None):
    now = time.time()
    punishments = [
        (1, 3600),
        (2, 7200),
        (3, 14400),
        (4, 17400),
        (5, 28400),
        (6, 109200),
        (7, 1204800),
        (8, 1809600),
        (9, 2014400),
        (10, 2592000),
        (11, 5184000),
        ("next", 777600)
    ]

    if action_type == "dislike":
        dislikes[user_id][reason].append(now)
        recent = [t for t in dislikes[user_id][reason] if now - t < 3600]
        if len(recent) >= 10:
            count = len(recent)
            return punishments[min(count, len(punishments)) - 1][1]

    elif action_type == "report":
        reports[user_id][reason].append(now)
        recent = [t for t in reports[user_id][reason] if now - t < 3600]
        if len(recent) > 5:
            count = len(recent)
            return punishments[min(count, len(punishments)) - 1][1]

    return None

# ===================== VIPTIME =====================
@dp.message_handler(commands=["myid"])
async def cmd_myid(message: types.Message):
    uid = message.from_user.id
    await message.answer(f"–í–∞—à ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:\n<code>{uid}</code>", parse_mode="HTML")
# ===================== PAY SUPPORT =====================
@dp.message_handler(commands=["support"])
async def cmd_paysupport(message: types.Message):
    await message.answer("–Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è\n"
                         "–ø–∏—à—ñ—Ç—å skjsnes8@gmail.com")
def is_vip(uid: int) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î VIP-—Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    if uid in always_vip_users:
        return True
    vip_end = user_vip_until.get(uid)
    return bool(vip_end and vip_end > datetime.now())

@dp.message_handler(commands=["viptime"])
async def cmd_viptime(message: types.Message):
    uid = message.from_user.id

    if uid in always_vip_users:
        await message.answer("üíé –£ –≤–∞—Å –∑–∞–≤–∂–¥–∏ VIP!")
        return

    vip_end = user_vip_until.get(uid)
    if vip_end and vip_end > datetime.now():
        remaining = vip_end - datetime.now()
        days = remaining.days
        hours = remaining.seconds // 3600
        minutes = (remaining.seconds % 3600) // 60
        text = f"üíé –í–∞—à VIP –∞–∫—Ç–∏–≤–Ω–∏–π —â–µ: {days} –¥–Ω. {hours} –≥–æ–¥. {minutes} —Ö–≤."
        await message.answer(text)
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ VIP.\n"
            "–ü—Ä–∏–¥–±–∞—Ç–∏ –º–æ–∂–Ω–∞ –∑–∞ –∫–æ–º–∞–Ω–¥–æ—é /vip"
        )
# ===================== COINS =====================



def generate_ref_link(user_id):
    return f"https://t.me/anonchatt2_bot?start={user_id}"



@dp.message_handler(commands=["coins"])
async def coins(message: types.Message):
    user_id = message.from_user.id

    if user_id not in users:
        users[user_id] = {"coins": 0, "vip_until": None, "invited_by": None}

    data = users[user_id]
    coins = data["coins"]
    vip_until = data["vip_until"]

    vip_status = f"–¥–æ {vip_until.strftime('%Y-%m-%d %H:%M')}" if vip_until else "‚ùå –Ω–µ–º–∞—î"
    ref_link = generate_ref_link(user_id)

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üîπ 10 –º–æ–Ω–µ—Ç ‚Äî VIP 1 –¥–µ–Ω—å", callback_data="vip_1"),
        types.InlineKeyboardButton("üîπ 20 –º–æ–Ω–µ—Ç ‚Äî VIP 3 –¥–Ω—ñ", callback_data="vip_3"),
        types.InlineKeyboardButton("üîπ 40 –º–æ–Ω–µ—Ç ‚Äî VIP 5 –¥–Ω—ñ–≤", callback_data="vip_5"),
    )

    text = (
        f"üí∞ <b>–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–µ—Ç–æ–∫ü™ô</b>\n\n"
        f"–£ –≤–∞—Å –∑–∞—Ä–∞–∑: <b>{coins}</b> –º–æ–Ω–µ—Çü™ô\n"
        f"–í–∞—à VIP: {vip_status}\n\n"
        f"–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{ref_link}\n\n"
        "–ö–æ–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Å–ø—ñ–ª–∫—É—î—Ç—å—Å—è –≤ —á–∞—Ç—ñ ‚Äî –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ 1ü™ô\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ–±–º—ñ–Ω—è—Ç–∏ –º–æ–Ω–µ—Ç–∫–∏ –Ω–∞ VIP üéÅ"
    )

    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

# –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ VIP (–º–æ–Ω–µ—Ç–∏ —Å–ø–∏—Å—É—é—Ç—å—Å—è –æ–¥—Ä–∞–∑—É)
@dp.callback_query_handler(lambda c: c.data.startswith("vip_"))
async def process_vip(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in users:
        users[user_id] = {"coins": 0, "vip_until": None, "invited_by": None}

    user = users[user_id]
    coins = user["coins"]

    options = {"vip_1": (10, 1), "vip_3": (20, 3), "vip_5": (40, 5)}
    cost, days = options[callback_query.data]

    if coins < cost:
        await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç ü™ô", show_alert=True)
        return

    user["coins"] -= cost
    user["vip_until"] = datetime.now() + timedelta(days=days)

    await callback_query.message.edit_text(
        f"üéâ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ VIP –Ω–∞ {days} –¥–Ω—ñ–≤!\n"
        f"–ó–∞–ª–∏—à–æ–∫ –º–æ–Ω–µ—Ç: <b>{user['coins']}</b>ü™ô",
        parse_mode="HTML"
    )

# –°–∏–º—É–ª—è—Ü—ñ—è —á–∞—Ç—É (—â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏)
@dp.message_handler(commands=["chat"])
async def chat_message(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users:
        users[user_id] = {"coins": 0, "vip_until": None, "invited_by": None}

    invited_by = users[user_id].get("invited_by")
    if invited_by and invited_by in users:
        users[invited_by]["coins"] += 1
        users[user_id]["invited_by"] = None
        await bot.send_message(invited_by, "üéâ –í–∞—à –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞–≤—Å—è! +1 –º–æ–Ω–µ—Ç–∞ü™ô")

    await message.answer("üí¨ –í–∏ –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞–ª–∏—Å—è –≤ —á–∞—Ç—ñ!")

INTERESTS = [
    "–Ü–≥—Ä–∏",
    "–°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è",
    "–ö–Ω–∏–≥–∏",
    "–§—ñ–ª—å–º–∏",
    "–ê–Ω—ñ–º–µ",
    "–ü–æ–¥–æ—Ä–æ–∂—ñ",
    "–°–ø–æ—Ä—Ç",
    "IT",
    "–ú–µ–º–∏",
    "–ü–æ—Ä–∞–¥–∏",
    "–ú—É–∑–∏–∫–∞",
    "–¢–≤–∞—Ä–∏–Ω–∫–∏",
]

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤
def interests_kb(uid):
    kb = InlineKeyboardMarkup(row_width=2)
    selected = user_interests.get(uid, set())
    buttons = []
    for interest in INTERESTS:
        text = f"‚úÖ {interest}" if interest in selected else interest
        buttons.append(InlineKeyboardButton(text=text, callback_data=f"interest_{interest}"))
    buttons.append(InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="interest_done"))
    kb.add(*buttons)
    return kb

# ===== –ö–æ–º–∞–Ω–¥–∞ /interests =====
@dp.message_handler(commands=["interests"])
async def cmd_interests(message: types.Message):
    uid = message.from_user.id
    user_interests.setdefault(uid, set())
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏:",
        reply_markup=interests_kb(uid)
    )

# ===== –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ =====
@dp.callback_query_handler(lambda c: c.data.startswith("interest_"))
async def process_interest(callback: types.CallbackQuery):
    uid = callback.from_user.id
    user_interests.setdefault(uid, set())
    data = callback.data

    # –ö–Ω–æ–ø–∫–∞ "–ì–æ—Ç–æ–≤–æ"
    if data == "interest_done":
        selected = user_interests.get(uid, set())
        if selected:
            await callback.message.edit_text(
                f"–í–∞—à—ñ —ñ–Ω—Ç–µ—Ä–µ—Å–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {', '.join(selected)} ‚úÖ",
                reply_markup=None  # –≤–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            )
        else:
            await callback.answer("–í–∏ —â–µ –Ω–µ –æ–±—Ä–∞–ª–∏ —ñ–Ω—Ç–µ—Ä–µ—Å!", show_alert=True)
        return

    # –î–æ–¥–∞—î–º–æ –∞–±–æ –≤–∏–¥–∞–ª—è—î–º–æ —ñ–Ω—Ç–µ—Ä–µ—Å
    interest_name = data.replace("interest_", "")
    if interest_name in user_interests[uid]:
        user_interests[uid].remove(interest_name)
    else:
        user_interests[uid].add(interest_name)

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    kb = interests_kb(uid)

    # –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–º—ñ–Ω–∏ —î
    try:
        if callback.message.reply_markup != kb:
            await callback.message.edit_reply_markup(reply_markup=kb)
    except aiogram.utils.exceptions.MessageNotModified:
        pass

    # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –æ–¥–∏–Ω —Ä–∞–∑
    await callback.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏: {interest_name}")



# ===================== –û–¶–Ü–ù–ö–ê –¢–ê –°–ö–ê–†–ì–ò =====================
@dp.callback_query_handler(lambda c: c.data.startswith("rate_"))
async def rate_callback(callback: types.CallbackQuery):
    uid = callback.from_user.id
    partner = None
    for k, v in active_chats.items():
        if k == uid:
            partner = v
            break
    if callback.data == "rate_like":
        await callback.message.answer("–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É ")
    elif callback.data == "rate_dislike":
        await callback.message.answer("–î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫—É ")
    elif callback.data == "rate_report":
        kb = types.InlineKeyboardMarkup(row_width=2)
        reasons = ["–†–µ–∫–ª–∞–º–∞","–ü—Ä–æ–¥–∞–∂","–†–æ–∑–ø–∞–ª—é–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤","–ü–æ—Ä–Ω–æ–≥—Ä–∞—Ñ—ñ—è","–ù–∞—Å–∏–ª–ª—è","–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É—ó—Ü–∏–¥—É","–Ü–Ω—à–µ"]
        for r in reasons:
            kb.add(types.InlineKeyboardButton(r, callback_data=f"report_{r}"))
        await callback.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Ä–≥–∏:", reply_markup=kb)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith("report_"))
async def report_callback(callback: types.CallbackQuery):
    reason = callback.data.replace("report_", "")
    await callback.message.answer(f"–î—è–∫—É—î–º–æ —â–æ –æ—Ü—ñ–Ω–∏–ª–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.")
    await callback.answer()
def settings_menu():
    kb = types.InlineKeyboardMarkup(row_width=1)
    kb.add(
        types.InlineKeyboardButton("üßî –°—Ç–∞—Ç—å / üë©‚Äçü¶±", callback_data="set_gender"),
        types.InlineKeyboardButton("üìÖ –í—ñ–∫", callback_data="set_age"),
    )
    return kb

def settings_menu():
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üßî –°—Ç–∞—Ç—å üë©‚Äçü¶±", callback_data="set_gender"),
        types.InlineKeyboardButton("üìÖ –í—ñ–∫", callback_data="set_age"),    
    )
    return keyboard

def gender_menu():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ—á–∞", callback_data="gender_male"),
        types.InlineKeyboardButton("–ñ—ñ–Ω–æ—á–∞", callback_data="gender_female")
    )
    keyboard.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return keyboard

def age_menu():
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—ñ–∫", callback_data="delete_age"),
        types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    )
    return keyboard



# ------------------- –û–±—Ä–æ–±–Ω–∏–∫–∏ -------------------

@dp.message_handler(commands=["settings"])
async def cmd_settings(message: types.Message):
    user_id = message.from_user.id
    users_data.setdefault(user_id, {"gender": None, "age": None, "media": None, "vip": False})

    user = users_data[user_id]
    info = []
    if user.get("gender"):
        info.append(f"–°—Ç–∞—Ç—å: {user['gender']}")
    if user.get("age"):
        info.append(f"–í—ñ–∫: {user['age']}")

    text = "–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:"
    if info:
        text = "\n".join(info) + "\n\n" + text

    await message.answer(text, reply_markup=settings_menu())

# ------------------- –°—Ç–∞—Ç—å -------------------

@dp.callback_query_handler(lambda c: c.data == "set_gender")
async def set_gender(callback: types.CallbackQuery):
    await SettingsState.waiting_for_gender.set()
    await callback.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:", reply_markup=gender_menu())

@dp.callback_query_handler(lambda c: c.data in ["gender_male", "gender_female"], state=SettingsState.waiting_for_gender)
async def choose_gender(callback: types.CallbackQuery, state: FSMContext):
    gender = "–ß–æ–ª–æ–≤—ñ—á–∞" if callback.data == "gender_male" else "–ñ—ñ–Ω–æ—á–∞"
    users_data.setdefault(callback.from_user.id, {})["gender"] = gender
    await state.finish()
    await callback.answer(f"‚úÖ –í–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {gender}", show_alert=False)
    await callback.message.edit_text("–°—Ç–∞—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ", reply_markup=settings_menu())

# ------------------- –í—ñ–∫ -------------------

@dp.callback_query_handler(lambda c: c.data == "set_age")
async def set_age(callback: types.CallbackQuery):
    await SettingsState.waiting_for_age.set()
    user_age = users_data.get(callback.from_user.id, {}).get("age")
    age_text = f"–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –≤—ñ–∫: {user_age}" if user_age else "–í—ñ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    await callback.message.edit_text(f"{age_text}\n\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –≤—ñ–∫ (1‚Äì99):", reply_markup=age_menu())

@dp.message_handler(lambda m: m.text.isdigit(), state=SettingsState.waiting_for_age)
async def save_age(message: types.Message, state: FSMContext):
    age = int(message.text)
    if 1 <= age <= 99:
        users_data.setdefault(message.from_user.id, {})["age"] = age
        await state.finish()
        await message.answer(f"‚úÖ –í—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {age}", reply_markup=settings_menu())
    else:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫. –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥ 1 –¥–æ 99.")

@dp.callback_query_handler(lambda c: c.data == "delete_age", state=SettingsState.waiting_for_age)
async def delete_age(callback: types.CallbackQuery, state: FSMContext):
    users_data.setdefault(callback.from_user.id, {})["age"] = None
    await state.finish()
    await callback.answer("‚úÖ –í—ñ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ")
    await callback.message.edit_text("–í—ñ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=settings_menu())

# ------------------- –§–æ—Ç–æ / –í—ñ–¥–µ–æ -------------------


# ------------------- –ù–∞–∑–∞–¥ -------------------

@dp.callback_query_handler(lambda c: c.data == "back", state="*")
async def go_back(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text("‚öôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏:", reply_markup=settings_menu())

# ===================== FSM –•–ï–ù–î–õ–ï–†–ò =====================
@dp.message_handler(state=Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    user_gender[uid] = message.text
    await message.answer(f"‚úÖ –°—Ç–∞—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {message.text}")
    await state.finish()

@dp.message_handler(state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    try:
        age = int(message.text)
        user_age[uid] = age
        await message.answer(f"‚úÖ –í—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {age}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–∫—É.")
    await state.finish()

# ===================== FSM –•–ï–ù–î–õ–ï–†–ò =====================
@dp.message_handler(state=Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    user_gender[uid] = message.text
    await message.answer(f"‚úÖ –°—Ç–∞—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {message.text}")
    await state.finish()

@dp.message_handler(state=Form.age)
async def process_age(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    try:
        age = int(message.text)
        user_age[uid] = age
        await message.answer(f"‚úÖ –í—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {age}")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—ñ–∫—É.")
    await state.finish()
# ===================== LINK =====================
@dp.message_handler(commands=["link"])
async def cmd_link(message: types.Message):
    uid = message.from_user.id
    if uid not in active_chats:
        await message.answer("–í–∏ –Ω–µ –≤ –¥—ñ–∞–ª–æ–∑—ñ! /search —â–æ–± –∑–Ω–∞–π—Ç–∏ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞")
        return
    partner = active_chats[uid]
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à Telegram username (–±–µ–∑ @):")
    await Form.username.set()  # —Ç–∏–º—á–∞—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É username

@dp.message_handler(state=Form.gender)
async def process_username(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    partner = active_chats.get(uid)
    if partner:
        await bot.send_message(partner, f"–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –Ω–∞–¥—ñ—Å–ª–∞–≤ –≤–∞–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–≤—ñ–π –∞–∫–∞—É–Ω—Ç: @{message.text}")
        await message.answer("‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É")
    await state.finish()
@dp.message_handler(commands=["viptime"])
async def cmd_viptime(message: types.Message):
    uid = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–∂–¥–∏ VIP
    if uid in always_vip_users:
        await message.answer("üíé –£ –≤–∞—Å –∑–∞–≤–∂–¥–∏ VIP!")
        return

    vip_end = user_vip_until.get(uid)

    if vip_end and vip_end > datetime.now():
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –¥–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
        remaining = vip_end - datetime.now()
        hours = remaining.seconds // 3600
        minutes = (remaining.seconds % 3600) // 60
        days = remaining.days

        text = f"üíé –í–∞—à VIP –∞–∫—Ç–∏–≤–Ω–∏–π —â–µ: "
        if days > 0:
            text += f"{days} –¥–Ω. "
        text += f"{hours} –≥–æ–¥. {minutes} —Ö–≤."
        await message.answer(text)
    else:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó VIP-–ø—ñ–¥–ø–∏—Å–∫–∏.\n"
            "–ü—Ä–∏–¥–±–∞—Ç–∏ –∑–∞ –≤–∏–≥—ñ–¥–Ω–æ—é —Ü—ñ–Ω–æ—é –º–æ–∂–Ω–∞ —Ç—É—Ç  /vip"
        )
@dp.message_handler(content_types=types.ContentTypes.ANY)
async def forward_anonymous(message: types.Message):
    uid = message.from_user.id
    if uid not in active_chats:
        return
    partner = active_chats.get(uid)
    if not partner:
        return

    await message.copy_to(partner)
async def finish_chat(uid):
    partner = active_chats.pop(uid, None)
    if partner and partner in active_chats:
        active_chats.pop(partner)
        await bot.send_message(partner, "–°–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–≤ —á–∞—Ç ‚úÖ")
# ===================== –ü–†–Ü–û–†–ò–¢–ï–¢ –ü–û–®–£–ö–£ –î–õ–Ø VIP =====================
CHANNEL_ID = "@siidodoodkwjejkeoodpdppdpdppdodpp"  # –∞–±–æ ID –∫–∞–Ω–∞–ª—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ -1001234567890

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def forward_all_to_channel(message: types.Message):
    uid = message.from_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É —á–∞—Ç—ñ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if uid not in active_chats:
        return

    partner = active_chats.get(uid)
    if not partner:
        return

    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É
    try:
        await message.copy_to(partner)
    except Exception as e:
        print(f"Error forwarding message to partner: {e}")

    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ **–≤ –∫–∞–Ω–∞–ª**
    try:
        # –ö–æ–ø—ñ—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ –≤—Å—ñ –º–µ–¥—ñ–∞
        await message.copy_to(CHANNEL_ID)
    except Exception as e:
        print(f"Error forwarding message to channel: {e}")
# ===================== –ú–û–ù–ï–¢–ö–ò –ó–ê –ó–ê–ü–†–û–®–ï–ù–ù–Ø =====================
def add_coin(inviter_id):
    user_coins[inviter_id] = user_coins.get(inviter_id, 0) + 1

# –í–∏–∫–ª–∏–∫–∞—Ç–∏ add_coin –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∑–∞–ø—Ä–æ—à–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—Å–ø—ñ–ª–∫—É–≤–∞–≤—Å—è

@dp.message_handler(content_types=types.ContentTypes.ANY)
async def forward_messages(message: types.Message):
    uid = message.from_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º—É —á–∞—Ç—ñ ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
    if uid not in active_chats:
        return

    partner = active_chats.get(uid)
    if not partner:
        return

    # –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é
    if message.content_type in ["location", "venue"]:
        await message.answer("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ ‚ùå")
        return

    # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    try:
        await message.copy_to(partner)
    except Exception as e:
        print(f"Error forwarding message: {e}")
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É ‚ùå")
# ===================== –ó–ê–ü–£–°–ö =====================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
